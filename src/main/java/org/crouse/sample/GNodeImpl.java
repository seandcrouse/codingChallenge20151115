package org.crouse.sample;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Optional;
import java.util.StringJoiner;

import org.crouse.sample.GNodeImpl.GNodeBuilder;
import org.crouse.sample.exception.GNodeException;

/**
 * Immutable implementation of the {@link GNode} interface. If the name is {@code null},
 * then an empty {@link String} is used. If the children object is {@code null}, then an empty
 * array of size 0 is used.
 * 
 * @author Sean Crouse
 *
 */
public class GNodeImpl implements GNode {
   private final String name;
   private final GNode[] children;

   private GNodeImpl(final String name, final GNode[] children) {
      this.name = name;
      this.children = Arrays.copyOf(children, children.length); // Defensive copy
   }

   @Override
   public String getName() {
      return this.name;
   }

   @Override
   public GNode[] getChildren() {
      return Arrays.copyOf(this.children, this.children.length); // Defensive copy
   }
   
   /*
    * (non-Javadoc)
    * 
    * @see java.lang.Object#hashCode()
    */
   @Override
   public int hashCode() {
      // Auto-generated by Eclipse
      
      // TODO - If 3rd-party libraries can be added, the Apache Commons-Lang
      // HashCodeBuilder would be preferred.
      
      final int prime = 31;
      int result = 1;
      result = prime * result + Arrays.hashCode(this.children);
      result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
      return result;
   }

   /*
    * (non-Javadoc)
    * 
    * @see java.lang.Object#equals(java.lang.Object)
    */
   @Override
   public boolean equals(Object obj) {
      // Auto-generated by Eclipse
      
      // TODO - If 3rd-party libraries can be added, the Apache Commons-Lang
      // EqualsBuilder would be preferred.
      
      if (this == obj) {
         return true;
      }
      if (obj == null) {
         return false;
      }
      if (!(obj instanceof GNodeImpl)) {
         return false;
      }
      GNodeImpl other = (GNodeImpl) obj;
      if (!Arrays.equals(this.children, other.children)) {
         return false;
      }
      if (this.name == null) {
         if (other.name != null) {
            return false;
         }
      } else if (!this.name.equals(other.name)) {
         return false;
      }
      return true;
   }

   @Override
   public String toString() {
      // If the VM argument namesOnly is true (i.e. -DnamesOnly=true), then 
      // only print the name of the node, and not the children.
      if (Boolean.getBoolean("namesOnly")) {
         return this.name;
      }
      
      String pre = this.name + " [";
      String post = "]";

      // Use a StringJoiner to combine the toString output of the children
      StringJoiner joiner = new StringJoiner(",", pre, post);
      for (GNode child : this.getChildren()) {
         joiner.add(child.toString());
      }

      return joiner.toString();
   }
   
   /**
    * Builds a GNodeImpl object.  Guarantees that node name is not {@code null}, 
    * all whitespace, or 0-length.  This builder allows the {@link GNodeImpl} to be 
    * immutable, while having some kind of placeholder object while the 
    * children are being built.
    * 
    * @author Sean Crouse
    *
    */
   public static class GNodeBuilder {
      private String name = "";
      private ArrayList<GNode> children = new ArrayList<>();
      
      public GNodeBuilder (final String name) {
         this.name = name;
      }
      
      public GNodeBuilder addChild(final GNode child) {
         this.children.add(child);
         return this;
      }
      
      public GNodeImpl build() throws GNodeException {
         validate();

         // Convert children list to array
         GNode[] childrenArray = new GNodeImpl[this.children.size()];
         childrenArray = this.children.toArray(childrenArray);

         // Return new node
         return new GNodeImpl(this.name, childrenArray);
      }
      
      /**
       * Validate fields for building node
       * @throws GNodeException name is null or empty
       */
      private void validate() throws GNodeException {
         // TODO - If 3rd-party libraries can be added, the Apache Commons-Lang
         // StringUtils.isNotBlank() can be used instead.  It has the advantage
         // of checking for null, 0-length, and all whitespace Strings in a 
         // single method call.

         // Validate node name is not null
         if (this.name == null) {
            throw new GNodeException("name cannot be null");
         }
         
         // Validate node name is not all whitespace, or a 0-length String
         if (this.name.trim().isEmpty()) {
            throw new GNodeException("name cannot be an empty String");
         }

      }
   }
}
